def othersreceivingvotes(websitestrsearch):
    """ _ """
    tsixplus = {}
    nodecounter = 0
    tsixcounter = 26
    rankingdict = {}
    inverserankingdict = {}

    strsearch = websitestrsearch
    print strsearch

    apsearchterm = "AP Top 25"  # 'class="number">1'
    searchothers = 'class="title">Others receiving votes: </span>'
    searchno2 = r'</p></div>\n</div>\n<div'
    # searchno2 = r'</p></div>\n</div>\n</div>\n</div> <!-- // 50/50 Layout for Rankings'
    teamsearchstart = '<span class="team-names">'
    teamsearchend = '</span><abbr title='
    if apsearchterm.lower() in strsearch.lower() and searchothers.lower() in strsearch.lower():
        findap = strsearch.find(apsearchterm)
        findothers = strsearch.find(searchothers)
        findend = strsearch.find(searchno2)
        print findothers
        outstring = strsearch[findothers+len(searchothers):findend]
        print outstring
        print "String length:", len(outstring)
        outstringlist = outstring.strip().split(",")
        print outstringlist
        for othervote in outstringlist:
            if outstringlist[0] != othervote:
                othervote = othervote[1:]
            space = othervote.rfind(" ")
            pts = othervote[space+1:]
            team = othervote[:space]
            print team, pts
            intpts = int(pts)
            if intpts not in tsixplus:
                tsixplus[intpts] = [team]
            else:
                tsixplus[intpts].append(team)
        print tsixplus
        pointorder = sorted(tsixplus, reverse=True)

        print "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
        # Find average of ties
        for score in pointorder:
            teamlist = tsixplus[score]
            teamspervote = len(teamlist)
            if teamspervote == 1:
                rankingdict[tsixcounter] = teamlist[0]
                inverserankingdict[teamlist[0]] = tsixcounter
                tsixcounter += 1
            else:  # If there is a tie in votes:
                nextrank = tsixcounter
                lastrank = tsixcounter + teamspervote
                valstoaverage = range(nextrank, lastrank, 1)  # + 1, 1)
                designatedrank = numpy.mean(valstoaverage)
                # if designatedrank not in rankingdict:
                #     rankingdict[designatedrank] = teamlist[0]
                # elif designatedrank in rankingdict:
                for team in teamlist:
                    if team == teamlist[0]:
                        rankingdict[designatedrank] = [team]
                    else:
                        rankingdict[designatedrank].append(team)
                    inverserankingdict[team] = designatedrank
                tsixcounter += teamspervote
        print rankingdict
        print tsixcounter
        print inverserankingdict

        return inverserankingdict
